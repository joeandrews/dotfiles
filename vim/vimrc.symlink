"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" load plugins from vim-plug
source ~/.vim/plugins.vim
source ~/.vim/plugin_configs.vim

if exists('$TMUX')
	let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
	let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Abbreviations
abbr funciton function
abbr teh the
abbr tempalte template

set nocompatible " not compatible with vi
set autoread " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start

" set a map leader for more key combos
let mapleader = ','
let g:mapleader = ','

set history=1000 " change history to 1000
set textwidth=120

" Tab control
set noexpandtab " insert tabs rather than spaces for <Tab>
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=2 " the visible width of tabs
set softtabstop=2 " edit as if the tabs are 4 characters wide
set shiftwidth=2 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'
set completeopt+=longest

if has('mouse')
		set mouse=a
		set ttymouse=xterm2
endif

set clipboard=unnamed

" faster redrawing
set ttyfast

" highlight conflicts
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" file type specific settings
if has('autocmd') && !exists('autocommands_loaded')

		let autocommands_loaded = 1
		autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
		autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
		autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
		autocmd FileType html setlocal ts=4 sts=4 sw=4 noexpandtab indentkeys-=*<return>
		autocmd FileType jade setlocal ts=2 sts=2 sw=2 noexpandtab
		autocmd FileType *.md.js :call SyntasticReset<cr>
		autocmd FileType markdown,textile setlocal textwidth=0 wrapmargin=0 wrap spell
		autocmd FileType .xml exe ":silent %!xmllint --format --recover - 2>/dev/null"

		" automatically resize panes on resize
		autocmd VimResized * exe 'normal! \<c-w>='
		autocmd BufWritePost .vimrc source %
		autocmd BufWritePost .vimrc.local source %
		" save all files on focus lost, ignoring warnings about untitled buffers
		autocmd FocusLost * silent! wa

	source ~/.vim/filetype_settings.vim

		" make quickfix windows take all the lower section of the screen when there
		" are multiple windows open
		autocmd FileType qf wincmd J

		let g:markdown_fenced_languages = ['css', 'javascript', 'js=javascript', 'json=javascript', 'stylus', 'html']

		" autocmd! BufEnter * call ApplyLocalSettings(expand('<afile>:p:h'))
endif

" code folding settings
set foldmethod=syntax " fold based on indent
set foldnestmax=10 " deepest fold is 10 levels
set nofoldenable " don't fold by default
set foldlevel=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set guifont=Source\ Code\ Pro\ for\ Powerline:h14

set so=7 " set 7 lines to the cursors - when moving vertical
set wildmenu " enhanced command line completion
set hidden " current buffer can be put into background
set showcmd " show incomplete commands
set noshowmode " don't show which mode disabled for PowerLine
set wildmode=list:longest " complete files like a shell
set scrolloff=3 " lines of text around cursor
set shell=$SHELL
set cmdheight=1 " command bar height

set title " set terminal title

" Searching
set ignorecase " case insensitive searching
set smartcase " case-sensitive if expresson contains a capital letter
set hlsearch
set incsearch " set incremental search, like modern browsers
set nolazyredraw " don't redraw while executing macros

set magic " Set magic on, for regex

set showmatch " show matching braces
set mat=2 " how many tenths of a second to blink

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500

" switch syntax highlighting on
syntax on

set number " show the current line number"

set autoindent " automatically set indent of new line
set smartindent

" Color Scheme Settings
color Tomorrow-Night

" Hide Scrollbar
set guioptions-=r

" Wrap long lines
set nowrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups, and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set backupdir=~/.vim-tmp
set directory=~/.vim-tmp


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => StatusLine
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set laststatus=2 " show the satus line all the time

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General mappings/shortcuts for functionality
" Additional, plugin-specific mappings are located under
" the plugins section

" Close the current buffer
" noremap <C-x> :q<cr>

" remap esc
inoremap jj <esc>

" Turn off highlighting
nnoremap <leader><space> :noh<CR> :match none<CR>

" Disable arrow keys in insert mode
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Disable arrow keys in normal mode
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Disable help F1 key
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Disable auto-commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" remove extra whitespace
"nmap <leader><space> :%s/\s\+$<cr>

" wipout buffer
"nmap <silent> <leader>b :bw<cr>

" shortcut to save
nmap <leader>, :w<cr>

" disable Ex mode
noremap Q <NOP>

" set paste toggle
set pastetoggle=<F6>

" edit ~/.vimrc
map <leader>ev :e! ~/.vimrc<cr>
" edit vim plugins
map <leader>evp :e! ~/.vim/plugins.vim<cr>
" edit vim functions
map <leader>evf :e! ~/.vim/functions.vim<cr>
" edit gitconfig
map <leader>eg :e! ~/.gitconfig<cr>

" Reselect the text that was just pasted
nnoremap <leader>v V`]

" toggle invisible characters
" set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=↪
nmap <leader>l :set list!<cr>

" Create a new vsplit, switch to it and open CtrlP
nnoremap <leader>w <C-w>v<C-w>l :CtrlP<CR>

" Create a new split, switch to it and open CtrlP
nnoremap <leader>s <C-w>s<C-w>j :CtrlP<CR>

" switch between current and last buffer
nmap <leader>. <c-^>

" enable . command in visual mode
vnoremap . :normal .<cr>

" Stupid shift key fixes
cmap W w

map <silent> <C-h> :call MovePane('h')<cr>
map <silent> <C-j> :call MovePane('j')<cr>
map <silent> <C-k> :call MovePane('k')<cr>
map <silent> <C-l> :call MovePane('l')<cr>

" toggle cursor line
nnoremap <leader>i :set cursorline!<cr>

" scroll the viewport faster
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" search for word under the cursor
nnoremap <leader>ma "fyiw :/<c-r>f<cr>
" nnoremap <leader>ma :exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))<CR>

" helpers for dealing with other people's code
nmap \t :set ts=2 sts=2 sw=2 noet<cr>
nmap \s :set ts=2 sts=2 sw=2 et<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! MovePane(key)
		let t:curwin = winnr()
		exec "wincmd ".a:key
		if (t:curwin == winnr())
				if (match(a:key,'[jk]'))
						wincmd v
				else
						wincmd s
				endif
				exec "wincmd ".a:key
		endif
endfunction

" recursively search up from dirname, sourcing all .vimrc.local files along the way
function! ApplyLocalSettings(dirname)
		" convert windows paths to unix style
		let l:curDir = substitute(a:dirname, '\\', '/', 'g')

		" walk to the top of the dir tree
		let l:parentDir = strpart(l:curDir, 0, strridx(l:curDir, '/'))
		if isdirectory(l:parentDir)
				call ApplyLocalSettings(l:parentDir)
		endif

		" now walk back down the path and source .vimsettings as you find them.
		" child directories can inherit from their parents
		let l:settingsFile = a:dirname . '/.vimrc.local'
		if filereadable(l:settingsFile)
				exec ':source' . l:settingsFile
		endif
endfunction

call ApplyLocalSettings(expand('.'))
